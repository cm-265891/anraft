syntax = "proto3";

package peer_proto;

service Peer {
    rpc HeartBeat(HeartBeatReq) returns (HeartBeatRes);
    rpc RequestVote(RequestVoteReq) returns (RequestVoteRes);
    rpc AppendEntries(AppendEntriesReq) returns (AppendEntriesRes);
}

enum PeerState {
    Follower = 0;
    Candidate = 1;
    Leader = 2;
}

message ReqHeader {
    int32 version = 1;
    int64 seqid = 3;
}

message ResHeader {
    int64 seqid = 1;
    int32 ret_code = 2;
    string ret_msg = 4;
}

message HeartBeatReq {
    ReqHeader header = 1;
}

message HeartBeatRes {
    ResHeader header = 1;
}

message RequestVoteReq {
    ReqHeader header = 1;
    int64 term = 2;
    string candidate_id = 3;
    int64 last_log_index = 4;
    int64 last_log_term = 5;
}

message RequestVoteRes {
    ResHeader header = 1;
    int64 term = 2;
    string vote_granted = 3;
}

message LogEntry {
    int64 index = 1;
    int64 term = 2;
    string key = 3;
    bytes value = 4;
}

message AppendEntriesReq {
    ReqHeader header = 1;
    int64 term = 2;
    string leader_id = 3;
    int64 prev_log_index = 4;
    int64 prev_log_term = 5;
    repeated LogEntry entries = 6;
    int64 leader_commit = 7;
}

message AppendEntriesRes {
    ResHeader header = 1;
    int64 term = 2;
    int32 result = 3;
    string msg = 4;
}
